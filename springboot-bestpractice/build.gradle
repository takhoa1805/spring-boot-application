plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

def pkgName = 'com.bestpractice.api'
def pkgVersion = "1.1.0"
def javaVersion = !project.hasProperty('javaVersion') ? '17' : project.getProperty('javaVersion')
def artifactId = 'spring-boot-bestpractice'

sourceCompatibility = javaVersion

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-nop'
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "io.springfox:springfox-swagger2:2.8.0"
    implementation "io.springfox:springfox-swagger-ui:2.8.0"

    // Token
    implementation 'com.auth0:java-jwt:4.4.0'

    // Database
    implementation "mysql:mysql-connector-java"
    implementation "org.postgresql:postgresql"
    implementation 'redis.clients:jedis:3.7.0'
    implementation 'org.mongodb:mongo-java-driver:3.12.14'
    implementation 'com.datastax.oss:java-driver-core:4.17.0'
    implementation 'com.datastax.oss:java-driver-query-builder:4.17.0'

    // Third party
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'

    testImplementation "org.hsqldb:hsqldb"
    testImplementation "org.hibernate:hibernate-entitymanager"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}