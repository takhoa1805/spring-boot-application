node {
    stage("Clone the project - GitHub") {
        git 'https://github.com/abhisheksr01/spring-boot-microservice-best-practices.git'
    }

    stage("Static Code Analysis - Checkstyle") {
        sh "./gradlew clean check"
        publishHTML target: [
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : 'build/reports/checkstyle',
            reportFiles          : 'main.html',
            reportName           : 'CheckStyle - Main Class Report'
        ]
        publishHTML target: [
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : 'build/reports/checkstyle',
            reportFiles          : 'test.html',
            reportName           : 'CheckStyle - Test Class Report'
        ]
    }

    stage("Build - Gradle") {
        sh "./gradlew clean build -x test -x checkstyleTest"
    }

    stage("Unit tests - Junit") {
        try {
            sh "./gradlew test -Pexcludee2e=**/true*\n"

            publishHTML target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'build/reports/tests/test',
                reportFiles: 'index.html',
                reportName: 'Unit Test Report'
            ]
        } catch (err) {
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*UnitTest.xml'])
            throw err
        }
    }

    stage("Code Coverage - Jacoco") {
        sh "./gradlew jacocoTestReport"
        sh "./gradlew jacocoTestCoverageVerification"

        publishHTML target: [
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'build/reports/jacocoHtml',
            reportFiles: 'index.html',
            reportName: 'Jacoco Coverage Report'
        ]
    }

    stage("BDD - Cucumber") {
        sh "./gradlew test --tests com.uk.companieshouse.e2e"

        publishHTML target: [
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'build/reports/cucumber',
            reportFiles: 'cucumber-report.html',
            reportName: 'Cucumber BDD Report'
        ]
    }

    stage("Mutation Testing - Pitest") {
        try {
            sh "./gradlew pitest"

            publishHTML target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'build/reports/cucumber',
                reportFiles: 'index.html',
                reportName: 'Mutation Testing Report'
            ]
        } catch (err) {
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*UnitTest.xml'])
            throw err
        }
    }

    stage("Dependency Vulnerability Check") {
        try {
            sh "./gradlew dependencyCheckAnalyze"

            publishHTML target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'build/reports/dependency-vulnerabilities',
                reportFiles: 'dependency-check-report.html',
                reportName: 'Dependency Vulnerability Check Report'
            ]
        } catch (err) {
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*UnitTest.xml'])
            throw err
        }
    }
}